#!/usr/bin/env python

import glob
import os
import re
import sys
from urllib.request import urlopen

# I hate doing this... but we've got to make this work on Github Actions...

if os.path.exists('/opt/hostedtoolcache/Python'):
    VERSION_INFO = sys.version_info
    LOCATION = '/opt/hostedtoolcache/Python/{}.{}.*/*/lib/python*/site-packages'.format(
        VERSION_INFO.major, VERSION_INFO.minor)
    LOCAL_PY_PATHS = glob.glob(LOCATION)
    if LOCAL_PY_PATHS and LOCAL_PY_PATHS[0] not in sys.path:
        sys.path.append(LOCAL_PY_PATHS[0])

from ruamel.yaml import YAML
from ruamel.yaml.comments import CommentedSeq

PROJECT_PATH = os.path.join(os.path.dirname(__file__), '..')
EMERITI_FN = os.path.join(PROJECT_PATH, 'flux-project-emeriti.yaml')
MAINTAINERS_FN = os.path.join(PROJECT_PATH, 'flux-project-maintainers.yaml')
ROLODEX_FN = os.path.join(PROJECT_PATH, 'rolodex.yaml')


REPOS = [
    'community',
    'flagger',
    'flux2',
    'go-git-providers',
    'helm-controller',
    'image-automation-controller',
    'image-reflector-controller',
    'kustomize-controller',
    'notification-controller',
    'pkg',
    'source-controller',
    'terraform-provider-flux',
    'website'
]

ARCHIVED_REPOS = [
    'flux',
    'helm-operator',
    'webui'
]


SHARED_MAINTENANCE = [
    'helm-controller',
    'image-automation-controller',
    'image-reflector-controller',
    'kustomize-controller',
    'notification-controller',
    'pkg',
    'source-controller'
]

def get_maintainer_info(repo):
    maintainers = set()
    emeriti = set()
    if repo == 'flux2':
        link = 'https://raw.githubusercontent.com/fluxcd/community/main/CORE-MAINTAINERS'
    else:
        link = 'https://raw.githubusercontent.com/fluxcd/{}/master/MAINTAINERS'.format(
            repo)
    with urlopen(link) as f:
        content = f.read().decode('utf-8')
    maintainers = set(
        re.findall(r'(.+?), (.+?) <(.+?)> \(github: (.+?), slack: (.+?)\)',
                   content, re.MULTILINE))
    emeriti = set(re.findall(r'^-\ ([\S\s]+?)$', content, re.MULTILINE))
    return (maintainers, emeriti)

def write_rolodex(info):
    data = {
        'emeriti': set(),
        'maintainers': []
    }

    # Merge all repo data into central rolodex
    maintainers = set()
    for repo in sorted(ARCHIVED_REPOS+REPOS):
        data['emeriti'] = data['emeriti'].union(info[repo]['emeriti'])
        maintainers = maintainers.union(info[repo]['maintainers'])

    # Break up maintainer data into dict
    for m in maintainers:
        maintainer = {}
        maintainer[m[3].replace('@', '').lower()] = {
            'name': m[0],
            'email': m[2],
            'affiliation': m[1],
            'slack': m[4]
        }
        data['maintainers'] += [maintainer]

    # Sort
    data['emeriti'] = list(data['emeriti'])
    data['emeriti'].sort()
    data['maintainers'].sort(key=lambda a: list(a.keys())[0])

    with open(ROLODEX_FN, 'w') as file_desc:
        yaml = YAML()
        yaml.dump(data, file_desc)

def write_emeriti(info):
    data = {}
    for repo in sorted(info):
        if info[repo]['emeriti']:
            emeriti = list(info[repo]['emeriti'])
            emeriti.sort()
            data[repo] = emeriti
    with open(EMERITI_FN, 'w') as file_desc:
        yaml = YAML()
        yaml.dump(data, file_desc)


def write_maintainers(info):
    data = {}
    for repo in info:
        if info[repo]['maintainers']:
            maintainers = list(info[repo]['maintainers'])
            maintainers.sort()
            data[repo] = CommentedSeq([m[3].replace('@', '').lower()
                                      for m in maintainers])
            if repo in SHARED_MAINTENANCE:
                data[repo].yaml_set_start_comment("Plus flux2 maintainers")
    with open(MAINTAINERS_FN, 'w') as file_desc:
        yaml = YAML()
        yaml.dump(data, file_desc)


def main():
    info = {}
    for repo in REPOS:
        info[repo] = {}
        (maintainers, emeriti) = get_maintainer_info(repo)
        info[repo]['emeriti'] = emeriti
        info[repo]['maintainers'] = maintainers

    for repo in ARCHIVED_REPOS:
        info[repo] = {}
        (maintainers, emeriti) = get_maintainer_info(repo)
        info[repo]['emeriti'] = emeriti
        info[repo]['maintainers'] = {}
        for m in maintainers:
            current_maintainer = False
            for r in info:
                if m[0] in [m[0] for m in info[r]['maintainers']]:
                    current_maintainer = True
                    break
            if not current_maintainer:
                info[repo]['emeriti'].add(m[0])

    write_rolodex(info)
    write_emeriti(info)
    write_maintainers(info)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Aborted.', sys.stderr)
        sys.exit(1)
